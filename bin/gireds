#!/usr/bin/env python

from pyraf import iraf
from pipeline.pipe import pipeline, filecheck
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--check', help='Checks if the calibration '
                    'exposures required are available in the raw '
                    'directory.', action='store_true')
parser.add_argument('-v', '--verbose', help='Prints the dictionary of '
                    'file associations.', action='store_true')
parser.add_argument('config_file', help='Configuration file for GIREDS')
args = parser.parse_args()

if args.check:

    pip = pipeline(args.config_file)
    pip.dry_run = True
    pip.associate_files()

    cal_categories = np.array(['bias', 'flat', 'twilight', 'arc'])

    filecheck(pip.std, cal_categories)

    cal_categories = np.array([
        'bias', 'flat', 'twilight', 'arc', 'standard_star'])

    filecheck(pip.sci, cal_categories)

    if args.verbose:
        print(json.dumps(pip.std, indent=4))
        print(json.dumps(pip.sci, indent=4))

else:
    iraf.gemini()
    iraf.unlearn('gemini')

    iraf.gemtools()
    iraf.unlearn('gemtools')
    pip = pipeline(args.config_file)

    ver_stamp = (50 * '#' + '\n' + 'GIREDS version hash: ' + pip.version +
                 '\n' + 50 * '#' + '\n')

    logfile = pip.run_dir + '/logfile.log'
    print('##################################################\n'
          '# GIREDS (Gmos Ifu REDuction Suite)              #\n'
          '##################################################\n'
          'Starting reduction at: {:s}\n'.format(time.asctime()))

    if (pip.reduction_step == 0) or\
            ((pip.single_step is False) and (pip.reduction_step >= 0)):

        print('Starting reduction step 0\n'
              'on directory {:s}\n'.format(pip.raw_dir))

        pip.associate_files()

    if (pip.reduction_step == 1) or\
            ((pip.single_step is False) and (pip.reduction_step >= 1)):

        os.chdir(pip.run_dir)

        iraf.printlog(ver_stamp, logfile=logfile, verbose='yes')

        iraf.printlog('Starting reduction step 1\n'
                      'on directory {:s}\n'.format(os.getcwd()),
                      logfile=logfile, verbose='yes')

        r = file('file_associations_sci.dat', 'r').read()
        pip.sci = eval(r)
        r = file('file_associations_std.dat', 'r').read()
        pip.std = eval(r)

        cal_categories = np.array(['bias', 'flat', 'twilight', 'arc'])

        for star in pip.std:

            cal = np.array([
                True if star[i] != '' else False for i in cal_categories])

            if not cal.all():
                iraf.printlog(
                    ('ERROR! Image {:s} does not have all the necessary'
                     'calibration files: ' + len(cal[~cal]) * '{:s} ')
                    .format(star['image'], *cal_categories[~cal]),
                    logfile=logfile, verbose='yes')
                iraf.printlog(
                    'Skipping image {:s}.'.format(star['image']),
                    logfile=logfile, verbose='yes')
                continue
            else:
                try:
                    pip.stdstar(star)
                except Exception as err:
                    iraf.printlog(
                        err.__repr__(), logfile=logfile, verbose='yes')
                    iraf.printlog(
                        'ERROR! An error ocurred when trying to reduce '
                        'the standard star {:s}. Check logfile for more '
                        'information.'.format(star),
                        logfile=logfile, verbose='yes')

    if (pip.reduction_step == 2) or\
            ((pip.single_step is False) and (pip.reduction_step >= 2)):

        iraf.printlog(ver_stamp, logfile=logfile, verbose='yes')

        os.chdir(pip.run_dir)
        iraf.printlog(
            'Starting reduction step 2 on directory {:s}\n'
            .format(os.getcwd()), logfile=logfile, verbose='yes')

        r = file('file_associations_sci.dat', 'r').read()
        pip.sci = eval(r)
        r = file('file_associations_std.dat', 'r').read()
        pip.std = eval(r)

        cal_categories = np.array([
            'bias', 'flat', 'twilight', 'arc', 'standard_star'])

        for sci in pip.sci:

            cal = np.array([
                True if sci[i] != '' else False for i in cal_categories])

            if not cal.all():
                iraf.printlog(
                    ('ERROR! Image {:s} does not have all the necessary\n'
                     'calibration files: ' + len(cal[~cal]) * '{:s} ')
                    .format(sci['image'], *cal_categories[~cal]),
                    logfile=logfile, verbose='yes')
                iraf.printlog(
                    'Skipping image {:s}.'.format(sci['image']),
                    logfile=logfile, verbose='yes')
                continue
            else:
                try:
                    pip.science(sci)
                except Exception as err:
                    iraf.printlog(
                        err.__repr__(), logfile=logfile, verbose='yes')
                    iraf.printlog(
                        'ERROR! An error ocurred when trying to reduce '
                        'the galaxy {:s}. Check logfile for more '
                        'information.'.format(sci),
                        logfile=logfile, verbose='yes')
